version: "3.9"

services:

  postgres:
    image: postgres:11.18-alpine
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    ports:
      - target: 5432
        published: ${POSTGRES_PORT:-5432}
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      # Use pg_isready to check postgres is running. Substitute different
      # user `postgres` if you've setup differently to config/pgpass-mainnet
      test: ["CMD-SHELL", "pg_isready -U cardano-db-sync -d cardano-db-sync"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ${POSTGRES_ARGS:--c maintenance_work_mem=1GB -c max_parallel_maintenance_workers=4}
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-node:
    image: inputoutput/cardano-node:${CARDANO_NODE_VERSION:-8.0.0}
    environment:
      - NETWORK=${NETWORK:-mainnet}
    volumes:
      - node-db:/data/db
      - node-ipc:/ipc
    restart: on-failure
    healthcheck:
      # Ping the EKG port to see if it responds.
      # Assuming if EKG isn't up then the rest of cardano-node isn't either.
      test: ["CMD-SHELL", "curl -f 127.0.0.1:12788 || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  ogmios:
    image: cardanosolutions/ogmios:${OGMIOS_VERSION:-latest}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gc-node-${NETWORK}_default"
      - "traefik.http.routers.ogmios-${NETWORK}.rule=Host(`ogmios.sunflower-${NETWORK}.m2tec.nl`)" 
      - "traefik.http.services.ogmios-${NETWORK}.loadbalancer.server.port=1337"      
    restart: on-failure
    command: [
      "--host", "0.0.0.0",
      "--node-socket", "/ipc/node.socket",
      "--node-config", "/config/cardano-node/config.json"
    ]
    volumes:
      - ./config/network/${NETWORK:-mainnet}:/config
      - node-ipc:/ipc
    ports:
      - ${OGMIOS_PORT:-1337}:1337
    depends_on:
      cardano-node:
        condition: service_healthy

  cardano-db-sync:
    image: inputoutput/cardano-db-sync:${CARDANO_DB_SYNC_VERSION:-13.1.1.3}
    environment:
      - NETWORK=${NETWORK:-mainnet}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-}
      - RESTORE_RECREATE_DB=N
      - EXTRA_DB_SYNC_ARGS=${EXTRA_DB_SYNC_ARGS:-}
    depends_on:
      # Depend on both services to be healthy before starting.
      cardano-node:
        condition: service_healthy
      postgres:
        condition: service_healthy
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    volumes:
      - db-sync-data:/var/lib/cexplorer
      - node-ipc:/node-ipc
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    # snapshots provided by RESTORE_SNAPSHOT env var will be downloaded to the working dir
    working_dir: /var/lib/cexplorer

  postgrest:
    image: postgrest/postgrest
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gc-node-${NETWORK}_default"      
      - "traefik.http.routers.postgrest-${NETWORK}.rule=Host(`postgrest.sunflower-${NETWORK}.m2tec.nl`)"
      - "traefik.http.services.postgrest-${NETWORK}.loadbalancer.server.port=3000"
    # ports:
    #   - ${POSTGREST_PORT:-3000}:3000
    environment:
      PGRST_DB_URI: postgres://${POSTGREST_USER}:${POSTGREST_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGREST_DB}
      PGRST_DB_SCHEMA: public
      #IMPORTANT: In production this role should not be the same as the one used for the connection:
      PGRST_DB_ANON_ROLE: ${POSTGREST_USER}
      PGRST_SERVER_PROXY_URI: "http://127.0.0.1:3000"
    depends_on:
      postgres:
        condition: service_healthy

  postgrest-gc:
    image: postgrest/postgrest
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gc-node-${NETWORK}_default"      
      - "traefik.http.routers.postgrest-gc-${NETWORK}.rule=Host(`postgrest-gc.sunflower-${NETWORK}.m2tec.nl`)"
      - "traefik.http.services.postgrest-gc-${NETWORK}.loadbalancer.server.port=3000"
    # ports:
    #   - ${POSTGREST_GC_PORT:-3000}:3000
    environment:
      PGRST_DB_URI: postgres://${POSTGREST_USER}:${POSTGREST_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGREST_DB}
      PGRST_DB_SCHEMA: gamechanger
      #IMPORTANT: In production this role should not be the same as the one used for the connection:
      PGRST_DB_ANON_ROLE: ${POSTGREST_USER}
      PGRST_SERVER_PROXY_URI: "http://127.0.0.1:3000"
    depends_on:
      postgres:
        condition: service_healthy

  swagger:
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gc-node-${NETWORK}_default"      
      - "traefik.http.routers.swagger-${NETWORK}.rule=Host(`swagger.sunflower-${NETWORK}.m2tec.nl`)"
      - "traefik.http.services.swagger-${NETWORK}.loadbalancer.server.port=8080"
    image: swaggerapi/swagger-ui
    # ports:
    #     - ${SWAGGER_PORT:-8080}:8080
    # expose:
    #     - "8080"
    environment:
        API_URL: http://localhost:${POSTGREST_PORT}/
    depends_on:
      postgres:
        condition: service_healthy

  pgadmin:
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gc-node-${NETWORK}_default"      
      - "traefik.http.routers.pgadmin-${NETWORK}.rule=Host(`pgadmin.sunflower-${NETWORK}.m2tec.nl`)"
      - "traefik.http.services.pgadmin-${NETWORK}.loadbalancer.server.port=80"          
    image: dpage/pgadmin4
    restart: always
    # TODO: make all this configurable.
    environment:
      - PGADMIN_DEFAULT_EMAIL=${EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGREST_PASSWORD}
      - PGADMIN_LISTEN_PORT=80
      - EMAIL_SANITIZED=${EMAIL_SANITIZED}
        # PGADMIN_CONFIG_SHARED_STORAGE: "[{ 'name': 'Shared 1', 'path': '/var/lib/pgadmin/storage','restricted_access': False}]"
    secrets:
      - pgpass_file
    entrypoint: >
      /bin/sh -c "
      mkdir -p /var/lib/pgadmin/storage/${EMAIL_SANITIZED};
      cp /run/secrets/pgpass_file /var/lib/pgadmin/storage/${EMAIL_SANITIZED}/pgpass;
      chmod 600 /var/lib/pgadmin/storage/${EMAIL_SANITIZED}/pgpass;
      /entrypoint.sh;
      "
    # ports:
    #   - "${PGADMIN_PORT:-5050}:80"
    links:
      - "postgres:pgsql-server"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
    depends_on:
      postgres:
        condition: service_healthy

  token-registry:
    image:  gimbalabs/dbless-cardano-token-registry:latest
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gc-node-${NETWORK}_default"       
      - "traefik.http.routers.token-registry-${NETWORK}.rule=Host(`token-registry.sunflower-${NETWORK}.m2tec.nl`)"
      - "traefik.http.services.token-registry-${NETWORK}.loadbalancer.server.port=3042"         
    restart: always
    # ports:
    #   - ${TOKEN_REGISTRY_PORT:-3042}:3042
    volumes:
      - token-registry-data:/app/cardano-token-registry
    depends_on:
      token-registry-updater:
        condition: service_healthy

  token-registry-updater:
    image: alpine/git
    entrypoint: sh
    restart: always
    # due to weird entrypoint issues, below env vars are not reaching command line, so pass them on docker-compose call 
    volumes:
      -  token-registry-data:/app/cardano-token-registry
    command: [
      "-c",
      "${TOKEN_REGISTRY_SCRIPT}"
          ]
    healthcheck:
      test: ["CMD-SHELL","-c", "[ -d $TOKEN_REGISTRY_DEST ] && exit 0"]
      interval: 30s
      timeout: 10s
      retries: 1000

  unimatrix-peer:
    image: unimatrix-peer:latest
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gc-node-${NETWORK}_default"      
      - "traefik.http.routers.unimatrix-${NETWORK}.rule=Host(`unimatrix.sunflower-${NETWORK}.m2tec.nl`)"
      - "traefik.http.services.unimatrix-${NETWORK}.loadbalancer.server.port=8765" 
    build:
      context: ./src/unimatrix
    restart: always
    # ports:
    #   - ${UNIMATRIX_PORT:-8765}:8765
    # TODO: fix env vars passing and link to persistent volume
    volumes:
      - unimatrix-data:/work/data

configs:
  servers.json:
    content: ${PGADMIN_SERVER}

secrets:
  postgres_db:
    file: ./config/secrets/cardano-db-sync/postgres_db
  postgres_password:
    file: ./config/secrets/cardano-db-sync/postgres_password
  postgres_user:
    file: ./config/secrets/cardano-db-sync/postgres_user
  pgpass_file:
    file: ./config/secrets/cardano-db-sync/pgpass
  
volumes:
  db-sync-data:
  postgres:
  node-db:
  node-ipc:
  pgadmin-data:
  token-registry-data:
  unimatrix-data:

# networks:
#   default:
#       name: traefik-net
#       external: true